// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockTrack_API.Data;

#nullable disable

namespace StockTrack_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241204001927_AllTables")]
    partial class AllTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockTrack_API.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ST_AREAS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2024, 12, 4, 0, 19, 25, 201, DateTimeKind.Utc).AddTicks(9570),
                            CreatedBy = "Admin",
                            Description = "Área de Testes",
                            InstitutionId = 1,
                            Name = "Teste",
                            UpdatedAt = new DateTime(2024, 12, 4, 0, 19, 25, 201, DateTimeKind.Utc).AddTicks(9570),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ST_INSTITUTIONS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessCode = "000",
                            CEP = "02110010",
                            City = "Sao Paulo",
                            Complement = "",
                            Name = "Servidor de testes",
                            Neighborhood = "Vila Guilherme",
                            Nickname = "Testes",
                            State = "SP",
                            StreetName = "Rua Alcantara",
                            StreetNumber = "113"
                        },
                        new
                        {
                            Id = 2,
                            AccessCode = "064",
                            CEP = "02110010",
                            City = "Sao Paulo",
                            Complement = "",
                            Name = "Horácio Augusto da Silveira",
                            Neighborhood = "Vila Guilherme",
                            Nickname = "ETEC Prof. Horácio",
                            State = "SP",
                            StreetName = "Rua Alcantara",
                            StreetNumber = "113"
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.Entities.MaterialTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypeEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "LOAN"
                        },
                        new
                        {
                            Id = 2,
                            Type = "CONSUMPTION"
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.Entities.MovimentationEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovimentationEventEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Event = "ENTRY"
                        },
                        new
                        {
                            Id = 2,
                            Event = "EDIT"
                        },
                        new
                        {
                            Id = 3,
                            Event = "EXIT"
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.Entities.MovimentationReasonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovimentationReasonEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Reason = "INSERTION"
                        },
                        new
                        {
                            Id = 2,
                            Reason = "EDIT"
                        },
                        new
                        {
                            Id = 3,
                            Reason = "RETURNFROMLOAN"
                        },
                        new
                        {
                            Id = 4,
                            Reason = "RETURNFROMMAINTENANCE"
                        },
                        new
                        {
                            Id = 5,
                            Reason = "DISPOSAL"
                        },
                        new
                        {
                            Id = 6,
                            Reason = "LOAN"
                        },
                        new
                        {
                            Id = 7,
                            Reason = "SENTTOMAINTENANCE"
                        },
                        new
                        {
                            Id = 8,
                            Reason = "REMOVED"
                        },
                        new
                        {
                            Id = 9,
                            Reason = "OTHER"
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.Entities.MovimentationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovimentationTypeEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Type = "AREA"
                        },
                        new
                        {
                            Id = 3,
                            Type = "WAREHOUSE"
                        },
                        new
                        {
                            Id = 4,
                            Type = "MATERIAL"
                        },
                        new
                        {
                            Id = 5,
                            Type = "LOAN"
                        },
                        new
                        {
                            Id = 6,
                            Type = "MAINTENANCE"
                        },
                        new
                        {
                            Id = 7,
                            Type = "GENERAL"
                        },
                        new
                        {
                            Id = 8,
                            Type = "CONSUMPTION"
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoleEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Role = "USER"
                        },
                        new
                        {
                            Id = 2,
                            Role = "WAREHOUSEMAN"
                        },
                        new
                        {
                            Id = 3,
                            Role = "COORDINATOR"
                        },
                        new
                        {
                            Id = 4,
                            Role = "SUPPORT"
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.MaterialStatus", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("MaterialId", "Status");

                    b.ToTable("ST_MATERIALS_STATUS");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            Status = 0,
                            Quantity = 3f
                        },
                        new
                        {
                            MaterialId = 1,
                            Status = 1,
                            Quantity = 1f
                        },
                        new
                        {
                            MaterialId = 1,
                            Status = 2,
                            Quantity = 1f
                        },
                        new
                        {
                            MaterialId = 1,
                            Status = 3,
                            Quantity = 5f
                        },
                        new
                        {
                            MaterialId = 1,
                            Status = 4,
                            Quantity = 1f
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.SolicitationMaterials", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("SolicitationId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "SolicitationId");

                    b.HasIndex("SolicitationId");

                    b.ToTable("ST_SOLICITATION_MATERIALS", (string)null);
                });

            modelBuilder.Entity("StockTrack_API.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecordNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ST_MATERIALS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedAt = new DateTime(2024, 12, 4, 0, 19, 25, 201, DateTimeKind.Utc).AddTicks(9636),
                            CreatedBy = "",
                            Description = "Notebook ThinkPad",
                            ImageURL = "",
                            InstitutionId = 1,
                            Manufacturer = "ThinkPad",
                            MaterialType = 0,
                            Measure = "UN",
                            Name = "Notebook",
                            RecordNumber = 123456,
                            UpdatedAt = new DateTime(2024, 12, 4, 0, 19, 25, 201, DateTimeKind.Utc).AddTicks(9637),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.MaterialWarehouses", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ST_MATERIAL_WAREHOUSES", (string)null);

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Movimentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("MovimentationBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ST_MOVIMENTATIONS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            Date = new DateTime(2024, 12, 3, 21, 19, 25, 201, DateTimeKind.Local).AddTicks(9736),
                            Description = "Adição de área \"Teste\"",
                            Event = 0,
                            InstitutionId = 1,
                            MovimentationBy = "Admin",
                            Name = "Área Teste",
                            Quantity = 1f,
                            Reason = 0,
                            Type = 1
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Solicitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BorroadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeclinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectReturnAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SolicitedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "InstitutionId");

                    b.ToTable("ST_SOLICITATIONS", (string)null);
                });

            modelBuilder.Entity("StockTrack_API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AccessDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VerifiedScheduled")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ST_USERS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 3, 21, 19, 25, 201, DateTimeKind.Local).AddTicks(9285),
                            Email = "admin@stocktrack.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 165, 177, 42, 93, 86, 230, 251, 199, 229, 235, 191, 72, 241, 1, 204, 252, 89, 203, 3, 177, 188, 26, 94, 181, 239, 96, 140, 75, 24, 248, 119, 183, 37, 255, 38, 99, 228, 1, 188, 144, 217, 69, 202, 164, 118, 168, 42, 225, 222, 179, 129, 46, 137, 186, 5, 39, 46, 56, 99, 146, 53, 123, 32, 153 },
                            PasswordSalt = new byte[] { 222, 29, 182, 146, 3, 227, 116, 250, 111, 64, 145, 38, 99, 214, 2, 84, 85, 96, 195, 191, 48, 167, 198, 76, 241, 115, 167, 154, 236, 165, 225, 64, 226, 29, 101, 0, 167, 218, 79, 211, 96, 223, 94, 188, 163, 12, 159, 230, 199, 10, 105, 73, 249, 57, 135, 125, 114, 181, 156, 28, 106, 71, 174, 178, 43, 164, 139, 56, 0, 121, 140, 55, 15, 239, 34, 95, 20, 18, 134, 115, 60, 226, 120, 175, 123, 11, 71, 238, 133, 63, 221, 32, 73, 240, 130, 188, 152, 225, 107, 26, 64, 93, 19, 63, 174, 187, 83, 139, 71, 28, 116, 123, 128, 51, 22, 114, 90, 100, 19, 174, 104, 216, 240, 166, 154, 195, 227, 246 },
                            PhotoUrl = "https://imgur.com/mOXzZLE.png",
                            Verified = true,
                            VerifiedAt = new DateTime(2024, 12, 3, 21, 19, 25, 201, DateTimeKind.Local).AddTicks(9302)
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.UserInstitution", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId", "InstitutionId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ST_USER_INSTITUTIONS");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            InstitutionId = 1,
                            Active = true,
                            UserRole = 3
                        },
                        new
                        {
                            UserId = 1,
                            InstitutionId = 2,
                            Active = true,
                            UserRole = 2
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("ST_WAREHOUSES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AreaId = 1,
                            CreatedAt = new DateTime(2024, 12, 4, 0, 19, 25, 201, DateTimeKind.Utc).AddTicks(9602),
                            CreatedBy = "",
                            Description = "Almoxarifado de informática",
                            InstitutionId = 1,
                            Name = "Informática",
                            UpdatedAt = new DateTime(2024, 12, 4, 0, 19, 25, 201, DateTimeKind.Utc).AddTicks(9602),
                            UpdatedBy = ""
                        });
                });

            modelBuilder.Entity("StockTrack_API.Models.WarehouseUsers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ST_WAREHOUSE_USERS", (string)null);
                });

            modelBuilder.Entity("StockTrack_API.Models.Area", b =>
                {
                    b.HasOne("StockTrack_API.Models.Institution", "Institution")
                        .WithMany("Areas")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.MaterialStatus", b =>
                {
                    b.HasOne("StockTrack_API.Models.Material", "Material")
                        .WithMany("Status")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("StockTrack_API.Models.Interfaces.SolicitationMaterials", b =>
                {
                    b.HasOne("StockTrack_API.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockTrack_API.Models.Solicitation", "Solicitation")
                        .WithMany("Items")
                        .HasForeignKey("SolicitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Solicitation");
                });

            modelBuilder.Entity("StockTrack_API.Models.Material", b =>
                {
                    b.HasOne("StockTrack_API.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("StockTrack_API.Models.MaterialWarehouses", b =>
                {
                    b.HasOne("StockTrack_API.Models.Material", "Material")
                        .WithMany("MaterialWarehouses")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockTrack_API.Models.Warehouse", "Warehouse")
                        .WithMany("MaterialWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockTrack_API.Models.Movimentation", b =>
                {
                    b.HasOne("StockTrack_API.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StockTrack_API.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StockTrack_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StockTrack_API.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Area");

                    b.Navigation("Material");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockTrack_API.Models.Solicitation", b =>
                {
                    b.HasOne("StockTrack_API.Models.UserInstitution", "UserInstitution")
                        .WithMany("Solicitations")
                        .HasForeignKey("UserId", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInstitution");
                });

            modelBuilder.Entity("StockTrack_API.Models.UserInstitution", b =>
                {
                    b.HasOne("StockTrack_API.Models.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockTrack_API.Models.User", "User")
                        .WithMany("UserInstitutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StockTrack_API.Models.Warehouse", b =>
                {
                    b.HasOne("StockTrack_API.Models.Area", "Area")
                        .WithMany("Warehouses")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockTrack_API.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("StockTrack_API.Models.WarehouseUsers", b =>
                {
                    b.HasOne("StockTrack_API.Models.User", "User")
                        .WithMany("WarehouseUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockTrack_API.Models.Warehouse", "Warehouse")
                        .WithMany("Warehousemans")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("StockTrack_API.Models.Area", b =>
                {
                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("StockTrack_API.Models.Institution", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StockTrack_API.Models.Material", b =>
                {
                    b.Navigation("MaterialWarehouses");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StockTrack_API.Models.Solicitation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StockTrack_API.Models.User", b =>
                {
                    b.Navigation("UserInstitutions");

                    b.Navigation("WarehouseUsers");
                });

            modelBuilder.Entity("StockTrack_API.Models.UserInstitution", b =>
                {
                    b.Navigation("Solicitations");
                });

            modelBuilder.Entity("StockTrack_API.Models.Warehouse", b =>
                {
                    b.Navigation("MaterialWarehouses");

                    b.Navigation("Warehousemans");
                });
#pragma warning restore 612, 618
        }
    }
}
